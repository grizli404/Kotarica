define(['dart_sdk', 'packages/web3dart/json_rpc.dart', 'packages/json_rpc_2/src/peer.dart', 'packages/json_rpc_2/src/parameters.dart', 'packages/web3dart/src/crypto/random_bridge.dart', 'packages/web3dart/credentials.dart', 'packages/web3dart/contracts.dart', 'packages/stream_channel/src/stream_channel_controller.dart', 'packages/isolate/runner.dart', 'packages/isolate/isolate_runner.dart', 'packages/json_rpc_2/src/exception.dart', 'packages/web3dart/src/utils/typed_data.dart', 'packages/web3dart/src/utils/rlp.dart'], (function load__packages__web3dart__web3dart_dart(dart_sdk, packages__web3dart__json_rpc$46dart, packages__json_rpc_2__src__peer$46dart, packages__json_rpc_2__src__parameters$46dart, packages__web3dart__src__crypto__random_bridge$46dart, packages__web3dart__credentials$46dart, packages__web3dart__contracts$46dart, packages__stream_channel__src__stream_channel_controller$46dart, packages__isolate__runner$46dart, packages__isolate__isolate_runner$46dart, packages__json_rpc_2__src__exception$46dart, packages__web3dart__src__utils__typed_data$46dart, packages__web3dart__src__utils__rlp$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const async = dart_sdk.async;
  const typed_data = dart_sdk.typed_data;
  const _interceptors = dart_sdk._interceptors;
  const _native_typed_data = dart_sdk._native_typed_data;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const json_rpc = packages__web3dart__json_rpc$46dart.json_rpc;
  const peer = packages__json_rpc_2__src__peer$46dart.src__peer;
  const parameters = packages__json_rpc_2__src__parameters$46dart.src__parameters;
  const crypto = packages__web3dart__src__crypto__random_bridge$46dart.crypto;
  const credentials = packages__web3dart__credentials$46dart.credentials;
  const contracts = packages__web3dart__contracts$46dart.contracts;
  const stream_channel = packages__stream_channel__src__stream_channel_controller$46dart.stream_channel;
  const runner = packages__isolate__runner$46dart.runner;
  const isolate_runner = packages__isolate__isolate_runner$46dart.isolate_runner;
  const exception = packages__json_rpc_2__src__exception$46dart.src__exception;
  const typed_data$ = packages__web3dart__src__utils__typed_data$46dart.src__utils__typed_data;
  const rlp = packages__web3dart__src__utils__rlp$46dart.src__utils__rlp;
  var web3dart = Object.create(dart.library);
  var $toString = dartx.toString;
  var $_get = dartx._get;
  var $hashCode = dartx.hashCode;
  var $_equals = dartx._equals;
  var $toRadixString = dartx.toRadixString;
  var $_set = dartx._set;
  var $cast = dartx.cast;
  var $add = dartx.add;
  var $remove = dartx.remove;
  var $singleWhere = dartx.singleWhere;
  var $where = dartx.where;
  var $toList = dartx.toList;
  var $clear = dartx.clear;
  dart._checkModuleNullSafetyMode(false);
  var T$ = {
    EtherUnitL: () => (T$.EtherUnitL = dart.constFn(dart.legacy(web3dart.EtherUnit)))(),
    BigIntL: () => (T$.BigIntL = dart.constFn(dart.legacy(core.BigInt)))(),
    intL: () => (T$.intL = dart.constFn(dart.legacy(core.int)))(),
    StringL: () => (T$.StringL = dart.constFn(dart.legacy(core.String)))(),
    EtherAmountL: () => (T$.EtherAmountL = dart.constFn(dart.legacy(web3dart.EtherAmount)))(),
    LinkedMapOfEtherUnitL$BigIntL: () => (T$.LinkedMapOfEtherUnitL$BigIntL = dart.constFn(_js_helper.LinkedMap$(T$.EtherUnitL(), T$.BigIntL())))(),
    ErrorL: () => (T$.ErrorL = dart.constFn(dart.legacy(core.Error)))(),
    ExceptionL: () => (T$.ExceptionL = dart.constFn(dart.legacy(core.Exception)))(),
    ParametersL: () => (T$.ParametersL = dart.constFn(dart.legacy(parameters.Parameters)))(),
    ParametersLToNull: () => (T$.ParametersLToNull = dart.constFn(dart.fnType(core.Null, [T$.ParametersL()])))(),
    dynamicToNull: () => (T$.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    StringToint: () => (T$.StringToint = dart.constFn(dart.fnType(core.int, [core.String])))(),
    StringToNint: () => (T$.StringToNint = dart.constFn(dart.nullable(T$.StringToint())))(),
    intN: () => (T$.intN = dart.constFn(dart.nullable(core.int)))(),
    String__Toint: () => (T$.String__Toint = dart.constFn(dart.fnType(core.int, [core.String], {onError: T$.StringToNint(), radix: T$.intN()}, {})))(),
    boolL: () => (T$.boolL = dart.constFn(dart.legacy(core.bool)))(),
    MapL: () => (T$.MapL = dart.constFn(dart.legacy(core.Map)))(),
    SyncInformationL: () => (T$.SyncInformationL = dart.constFn(dart.legacy(web3dart.SyncInformation)))(),
    EthereumAddressL: () => (T$.EthereumAddressL = dart.constFn(dart.legacy(credentials.EthereumAddress)))(),
    StringLTointL: () => (T$.StringLTointL = dart.constFn(dart.fnType(T$.intL(), [T$.StringL()])))(),
    StringLToEtherAmountL: () => (T$.StringLToEtherAmountL = dart.constFn(dart.fnType(T$.EtherAmountL(), [T$.StringL()])))(),
    Uint8ListL: () => (T$.Uint8ListL = dart.constFn(dart.legacy(typed_data.Uint8List)))(),
    StringLToUint8ListL: () => (T$.StringLToUint8ListL = dart.constFn(dart.fnType(T$.Uint8ListL(), [T$.StringL()])))(),
    MapOfStringL$dynamic: () => (T$.MapOfStringL$dynamic = dart.constFn(core.Map$(T$.StringL(), dart.dynamic)))(),
    MapLOfStringL$dynamic: () => (T$.MapLOfStringL$dynamic = dart.constFn(dart.legacy(T$.MapOfStringL$dynamic())))(),
    TransactionInformationL: () => (T$.TransactionInformationL = dart.constFn(dart.legacy(web3dart.TransactionInformation)))(),
    MapLOfStringL$dynamicToTransactionInformationL: () => (T$.MapLOfStringL$dynamicToTransactionInformationL = dart.constFn(dart.fnType(T$.TransactionInformationL(), [T$.MapLOfStringL$dynamic()])))(),
    TransactionReceiptL: () => (T$.TransactionReceiptL = dart.constFn(dart.legacy(web3dart.TransactionReceipt)))(),
    MapLOfStringL$dynamicToTransactionReceiptL: () => (T$.MapLOfStringL$dynamicToTransactionReceiptL = dart.constFn(dart.fnType(T$.TransactionReceiptL(), [T$.MapLOfStringL$dynamic()])))(),
    ListL: () => (T$.ListL = dart.constFn(dart.legacy(core.List)))(),
    IdentityMapOfStringL$StringL: () => (T$.IdentityMapOfStringL$StringL = dart.constFn(_js_helper.IdentityMap$(T$.StringL(), T$.StringL())))(),
    FilterEventL: () => (T$.FilterEventL = dart.constFn(dart.legacy(web3dart.FilterEvent)))(),
    RunnerL: () => (T$.RunnerL = dart.constFn(dart.legacy(runner.Runner)))(),
    CompleterOfRunnerL: () => (T$.CompleterOfRunnerL = dart.constFn(async.Completer$(T$.RunnerL())))(),
    IsolateRunnerL: () => (T$.IsolateRunnerL = dart.constFn(dart.legacy(isolate_runner.IsolateRunner)))(),
    EthPrivateKeyL: () => (T$.EthPrivateKeyL = dart.constFn(dart.legacy(credentials.EthPrivateKey)))(),
    FutureOfEthPrivateKeyL: () => (T$.FutureOfEthPrivateKeyL = dart.constFn(async.Future$(T$.EthPrivateKeyL())))(),
    FutureLOfEthPrivateKeyL: () => (T$.FutureLOfEthPrivateKeyL = dart.constFn(dart.legacy(T$.FutureOfEthPrivateKeyL())))(),
    StringLToFutureLOfEthPrivateKeyL: () => (T$.StringLToFutureLOfEthPrivateKeyL = dart.constFn(dart.fnType(T$.FutureLOfEthPrivateKeyL(), [T$.StringL()])))(),
    _SigningInputL: () => (T$._SigningInputL = dart.constFn(dart.legacy(web3dart._SigningInput)))(),
    FutureOfUint8ListL: () => (T$.FutureOfUint8ListL = dart.constFn(async.Future$(T$.Uint8ListL())))(),
    FutureLOfUint8ListL: () => (T$.FutureLOfUint8ListL = dart.constFn(dart.legacy(T$.FutureOfUint8ListL())))(),
    _SigningInputLToFutureLOfUint8ListL: () => (T$._SigningInputLToFutureLOfUint8ListL = dart.constFn(dart.fnType(T$.FutureLOfUint8ListL(), [T$._SigningInputL()])))(),
    JSArrayOfStringL: () => (T$.JSArrayOfStringL = dart.constFn(_interceptors.JSArray$(T$.StringL())))(),
    ListOfStringL: () => (T$.ListOfStringL = dart.constFn(core.List$(T$.StringL())))(),
    ListLOfStringL: () => (T$.ListLOfStringL = dart.constFn(dart.legacy(T$.ListOfStringL())))(),
    JSArrayOfListLOfStringL: () => (T$.JSArrayOfListLOfStringL = dart.constFn(_interceptors.JSArray$(T$.ListLOfStringL())))(),
    IdentityMapOfStringL$dynamic: () => (T$.IdentityMapOfStringL$dynamic = dart.constFn(_js_helper.IdentityMap$(T$.StringL(), dart.dynamic)))(),
    _InstantiatedFilterL: () => (T$._InstantiatedFilterL = dart.constFn(dart.legacy(web3dart._InstantiatedFilter)))(),
    JSArrayOf_InstantiatedFilterL: () => (T$.JSArrayOf_InstantiatedFilterL = dart.constFn(_interceptors.JSArray$(T$._InstantiatedFilterL())))(),
    FutureL: () => (T$.FutureL = dart.constFn(dart.legacy(async.Future)))(),
    JSArrayOfFutureL: () => (T$.JSArrayOfFutureL = dart.constFn(_interceptors.JSArray$(T$.FutureL())))(),
    VoidToNull: () => (T$.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    RPCErrorL: () => (T$.RPCErrorL = dart.constFn(dart.legacy(json_rpc.RPCError)))(),
    RpcExceptionL: () => (T$.RpcExceptionL = dart.constFn(dart.legacy(exception.RpcException)))(),
    TimerL: () => (T$.TimerL = dart.constFn(dart.legacy(async.Timer)))(),
    TimerLTovoid: () => (T$.TimerLTovoid = dart.constFn(dart.fnType(dart.void, [T$.TimerL()])))(),
    ListOf_InstantiatedFilterL: () => (T$.ListOf_InstantiatedFilterL = dart.constFn(core.List$(T$._InstantiatedFilterL())))(),
    IterableL: () => (T$.IterableL = dart.constFn(dart.legacy(core.Iterable)))(),
    _InstantiatedFilterLToboolL: () => (T$._InstantiatedFilterLToboolL = dart.constFn(dart.fnType(T$.boolL(), [T$._InstantiatedFilterL()])))(),
    ObjectL: () => (T$.ObjectL = dart.constFn(dart.legacy(core.Object)))(),
    JSArrayOfObjectL: () => (T$.JSArrayOfObjectL = dart.constFn(_interceptors.JSArray$(T$.ObjectL())))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T$);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: web3dart.EtherUnit.prototype,
        [_name$]: "EtherUnit.wei",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: web3dart.EtherUnit.prototype,
        [_name$]: "EtherUnit.kwei",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: web3dart.EtherUnit.prototype,
        [_name$]: "EtherUnit.mwei",
        index: 2
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: web3dart.EtherUnit.prototype,
        [_name$]: "EtherUnit.gwei",
        index: 3
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: web3dart.EtherUnit.prototype,
        [_name$]: "EtherUnit.szabo",
        index: 4
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: web3dart.EtherUnit.prototype,
        [_name$]: "EtherUnit.finney",
        index: 5
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: web3dart.EtherUnit.prototype,
        [_name$]: "EtherUnit.ether",
        index: 6
      });
    },
    get C7() {
      return C[7] = dart.constList([C[0] || CT.C0, C[1] || CT.C1, C[2] || CT.C2, C[3] || CT.C3, C[4] || CT.C4, C[5] || CT.C5, C[6] || CT.C6], T$.EtherUnitL());
    },
    get C8() {
      return C[8] = dart.fn(core.int.parse, T$.String__Toint());
    },
    get C9() {
      return C[9] = dart.fn(crypto.hexToBytes, T$.StringLToUint8ListL());
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: web3dart.BlockNum.prototype,
        [blockNum$]: 1,
        [useAbsolute$]: false
      });
    },
    get C11() {
      return C[11] = dart.fn(web3dart._internalCreatePrivateKey, T$.StringLToFutureLOfEthPrivateKeyL());
    },
    get C12() {
      return C[12] = dart.fn(web3dart.internalSign, T$._SigningInputLToFutureLOfUint8ListL());
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: web3dart.BlockNum.prototype,
        [blockNum$]: 2,
        [useAbsolute$]: false
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 2000000
      });
    }
  }, false);
  var C = Array(15).fill(void 0);
  var I = [
    "package:web3dart/web3dart.dart",
    "file:///C:/Users/Daka/Downloads/flutter_windows_2.0.1-stable/flutter/.pub-cache/hosted/pub.dartlang.org/web3dart-1.2.3/lib/src/core/transaction_signer.dart"
  ];
  var _name$ = dart.privateName(web3dart, "_name");
  web3dart.EtherUnit = class EtherUnit extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (web3dart.EtherUnit.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = web3dart.EtherUnit.prototype;
  dart.addTypeTests(web3dart.EtherUnit);
  dart.addTypeCaches(web3dart.EtherUnit);
  dart.setMethodSignature(web3dart.EtherUnit, () => ({
    __proto__: dart.getMethods(web3dart.EtherUnit.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(web3dart.EtherUnit, I[0]);
  dart.setFieldSignature(web3dart.EtherUnit, () => ({
    __proto__: dart.getFields(web3dart.EtherUnit.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(web3dart.EtherUnit, ['toString']);
  web3dart.EtherUnit.wei = C[0] || CT.C0;
  web3dart.EtherUnit.kwei = C[1] || CT.C1;
  web3dart.EtherUnit.mwei = C[2] || CT.C2;
  web3dart.EtherUnit.gwei = C[3] || CT.C3;
  web3dart.EtherUnit.szabo = C[4] || CT.C4;
  web3dart.EtherUnit.finney = C[5] || CT.C5;
  web3dart.EtherUnit.ether = C[6] || CT.C6;
  web3dart.EtherUnit.values = C[7] || CT.C7;
  var _value$ = dart.privateName(web3dart, "EtherAmount._value");
  var _value = dart.privateName(web3dart, "_value");
  web3dart.EtherAmount = class EtherAmount extends core.Object {
    get [_value]() {
      return this[_value$];
    }
    set [_value](value) {
      super[_value] = value;
    }
    get getInWei() {
      return this[_value];
    }
    get getInEther() {
      return this.getValueInUnitBI(web3dart.EtherUnit.ether);
    }
    static fromUnitAndValue(unit, amount) {
      let parsedAmount = null;
      if (T$.BigIntL().is(amount)) {
        parsedAmount = amount;
      } else if (T$.intL().is(amount)) {
        parsedAmount = core._BigIntImpl.from(amount);
      } else if (T$.StringL().is(amount)) {
        parsedAmount = core.BigInt.parse(amount);
      } else {
        dart.throw(new core.ArgumentError.new("Invalid type, must be BigInt, string or int"));
      }
      return new web3dart.EtherAmount.inWei(parsedAmount['*'](web3dart.EtherAmount._factors[$_get](unit)));
    }
    getValueInUnitBI(unit) {
      return this[_value]['~/'](web3dart.EtherAmount._factors[$_get](unit));
    }
    getValueInUnit(unit) {
      let value = this[_value]['~/'](web3dart.EtherAmount._factors[$_get](unit));
      let remainder = this[_value].remainder(web3dart.EtherAmount._factors[$_get](unit));
      return dart.notNull(value.toInt()) + dart.notNull(remainder.toInt()) / dart.notNull(web3dart.EtherAmount._factors[$_get](unit).toInt());
    }
    toString() {
      return "EtherAmount: " + dart.str(this.getInWei) + " wei";
    }
    get hashCode() {
      return dart.hashCode(this.getInWei);
    }
    _equals(other) {
      if (other == null) return false;
      return T$.EtherAmountL().is(other) && dart.equals(other.getInWei, this.getInWei);
    }
  };
  (web3dart.EtherAmount.inWei = function(_value) {
    this[_value$] = _value;
    ;
  }).prototype = web3dart.EtherAmount.prototype;
  (web3dart.EtherAmount.zero = function() {
    web3dart.EtherAmount.inWei.call(this, core.BigInt.zero);
  }).prototype = web3dart.EtherAmount.prototype;
  dart.addTypeTests(web3dart.EtherAmount);
  dart.addTypeCaches(web3dart.EtherAmount);
  dart.setMethodSignature(web3dart.EtherAmount, () => ({
    __proto__: dart.getMethods(web3dart.EtherAmount.__proto__),
    getValueInUnitBI: dart.fnType(dart.legacy(core.BigInt), [dart.legacy(web3dart.EtherUnit)]),
    getValueInUnit: dart.fnType(dart.legacy(core.num), [dart.legacy(web3dart.EtherUnit)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(web3dart.EtherAmount, () => ({
    __proto__: dart.getGetters(web3dart.EtherAmount.__proto__),
    getInWei: dart.legacy(core.BigInt),
    getInEther: dart.legacy(core.BigInt),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(web3dart.EtherAmount, I[0]);
  dart.setFieldSignature(web3dart.EtherAmount, () => ({
    __proto__: dart.getFields(web3dart.EtherAmount.__proto__),
    [_value]: dart.finalFieldType(dart.legacy(core.BigInt))
  }));
  dart.defineExtensionMethods(web3dart.EtherAmount, ['toString', '_equals']);
  dart.defineExtensionAccessors(web3dart.EtherAmount, ['hashCode']);
  dart.defineLazy(web3dart.EtherAmount, {
    /*web3dart.EtherAmount._factors*/get _factors() {
      return new (T$.LinkedMapOfEtherUnitL$BigIntL()).from([web3dart.EtherUnit.wei, core.BigInt.one, web3dart.EtherUnit.kwei, core._BigIntImpl.from(10).pow(3), web3dart.EtherUnit.mwei, core._BigIntImpl.from(10).pow(6), web3dart.EtherUnit.gwei, core._BigIntImpl.from(10).pow(9), web3dart.EtherUnit.szabo, core._BigIntImpl.from(10).pow(12), web3dart.EtherUnit.finney, core._BigIntImpl.from(10).pow(15), web3dart.EtherUnit.ether, core._BigIntImpl.from(10).pow(18)]);
    }
  }, true);
  var useAbsolute$ = dart.privateName(web3dart, "BlockNum.useAbsolute");
  var blockNum$ = dart.privateName(web3dart, "BlockNum.blockNum");
  web3dart.BlockNum = class BlockNum extends core.Object {
    get useAbsolute() {
      return this[useAbsolute$];
    }
    set useAbsolute(value) {
      super.useAbsolute = value;
    }
    get blockNum() {
      return this[blockNum$];
    }
    set blockNum(value) {
      super.blockNum = value;
    }
    get isPending() {
      return !dart.test(this.useAbsolute) && this.blockNum === 2;
    }
    toBlockParam() {
      if (dart.test(this.useAbsolute)) return "0x" + this.blockNum[$toRadixString](16);
      switch (this.blockNum) {
        case 0:
        {
          return "earliest";
        }
        case 1:
        {
          return "latest";
        }
        case 2:
        {
          return "pending";
        }
        default:
        {
          return "latest";
        }
      }
    }
  };
  (web3dart.BlockNum.__ = function(useAbsolute, blockNum) {
    this[useAbsolute$] = useAbsolute;
    this[blockNum$] = blockNum;
    ;
  }).prototype = web3dart.BlockNum.prototype;
  (web3dart.BlockNum.exact = function(blockNum) {
    this[blockNum$] = blockNum;
    this[useAbsolute$] = true;
    ;
  }).prototype = web3dart.BlockNum.prototype;
  (web3dart.BlockNum.genesis = function() {
    this[useAbsolute$] = false;
    this[blockNum$] = 0;
    ;
  }).prototype = web3dart.BlockNum.prototype;
  (web3dart.BlockNum.current = function() {
    this[useAbsolute$] = false;
    this[blockNum$] = 1;
    ;
  }).prototype = web3dart.BlockNum.prototype;
  (web3dart.BlockNum.pending = function() {
    this[useAbsolute$] = false;
    this[blockNum$] = 2;
    ;
  }).prototype = web3dart.BlockNum.prototype;
  dart.addTypeTests(web3dart.BlockNum);
  dart.addTypeCaches(web3dart.BlockNum);
  dart.setMethodSignature(web3dart.BlockNum, () => ({
    __proto__: dart.getMethods(web3dart.BlockNum.__proto__),
    toBlockParam: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(web3dart.BlockNum, () => ({
    __proto__: dart.getGetters(web3dart.BlockNum.__proto__),
    isPending: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(web3dart.BlockNum, I[0]);
  dart.setFieldSignature(web3dart.BlockNum, () => ({
    __proto__: dart.getFields(web3dart.BlockNum.__proto__),
    useAbsolute: dart.finalFieldType(dart.legacy(core.bool)),
    blockNum: dart.finalFieldType(dart.legacy(core.int))
  }));
  var socketConnector$ = dart.privateName(web3dart, "Web3Client.socketConnector");
  var printErrors = dart.privateName(web3dart, "Web3Client.printErrors");
  var _streamRpcPeer = dart.privateName(web3dart, "_streamRpcPeer");
  var _operations = dart.privateName(web3dart, "_operations");
  var _filters = dart.privateName(web3dart, "_filters");
  var _jsonRpc = dart.privateName(web3dart, "_jsonRpc");
  var _makeRPCCall = dart.privateName(web3dart, "_makeRPCCall");
  var _connectWithPeer = dart.privateName(web3dart, "_connectWithPeer");
  var _getBlockParam = dart.privateName(web3dart, "_getBlockParam");
  web3dart.Web3Client = class Web3Client extends core.Object {
    get socketConnector() {
      return this[socketConnector$];
    }
    set socketConnector(value) {
      super.socketConnector = value;
    }
    get printErrors() {
      return this[printErrors];
    }
    set printErrors(value) {
      this[printErrors] = value;
    }
    [_makeRPCCall](T, $function, params = null) {
      return async.async(dart.legacy(T), (function* _makeRPCCall() {
        try {
          let data = (yield this[_jsonRpc].call($function, params));
          if (T$.ErrorL().is(data) || T$.ExceptionL().is(data)) dart.throw(data);
          return dart.legacy(T).as(data.result);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (dart.test(this.printErrors)) core.print(e);
          dart.rethrow(e$);
        }
      }).bind(this));
    }
    [_connectWithPeer]() {
      let t1;
      if (this[_streamRpcPeer] != null && !dart.test(this[_streamRpcPeer].isClosed)) return this[_streamRpcPeer];
      if (this.socketConnector == null) return null;
      let socket = this.socketConnector();
      this[_streamRpcPeer] = (t1 = new peer.Peer.new(socket), (() => {
        t1.registerMethod("eth_subscription", dart.fn(params => {
          this[_filters].handlePubSubNotification(params);
        }, T$.ParametersLToNull()));
        return t1;
      })());
      this[_streamRpcPeer].listen().then(core.Null, dart.fn(_ => {
        this[_streamRpcPeer] = null;
        this[_filters].handleConnectionClosed();
      }, T$.dynamicToNull()));
      return this[_streamRpcPeer];
    }
    [_getBlockParam](block) {
      let t1;
      return (t1 = block, t1 == null ? web3dart.Web3Client._defaultBlock : t1).toBlockParam();
    }
    credentialsFromPrivateKey(privateKey) {
      return this[_operations].privateKeyFromHex(privateKey);
    }
    getClientVersion() {
      return this[_makeRPCCall](T$.StringL(), "web3_clientVersion");
    }
    getNetworkId() {
      return this[_makeRPCCall](T$.StringL(), "net_version").then(T$.intL(), C[8] || CT.C8);
    }
    isListeningForNetwork() {
      return this[_makeRPCCall](T$.boolL(), "net_listening");
    }
    getPeerCount() {
      return async.async(T$.intL(), (function* getPeerCount() {
        let hex = (yield this[_makeRPCCall](T$.StringL(), "net_peerCount"));
        return crypto.hexToInt(hex).toInt();
      }).bind(this));
    }
    getEtherProtocolVersion() {
      return async.async(T$.intL(), (function* getEtherProtocolVersion() {
        let hex = (yield this[_makeRPCCall](T$.StringL(), "eth_protocolVersion"));
        return crypto.hexToInt(hex).toInt();
      }).bind(this));
    }
    getSyncStatus() {
      return async.async(T$.SyncInformationL(), (function* getSyncStatus() {
        let data = (yield this[_makeRPCCall](dart.dynamic, "eth_syncing"));
        if (T$.MapL().is(data)) {
          let startingBlock = crypto.hexToInt(T$.StringL().as(data[$_get]("startingBlock"))).toInt();
          let currentBlock = crypto.hexToInt(T$.StringL().as(data[$_get]("currentBlock"))).toInt();
          let highestBlock = crypto.hexToInt(T$.StringL().as(data[$_get]("highestBlock"))).toInt();
          return new web3dart.SyncInformation.__(startingBlock, currentBlock, highestBlock);
        } else {
          return new web3dart.SyncInformation.__(null, null, null);
        }
      }).bind(this));
    }
    coinbaseAddress() {
      return async.async(T$.EthereumAddressL(), (function* coinbaseAddress() {
        let hex = (yield this[_makeRPCCall](T$.StringL(), "eth_coinbase"));
        return credentials.EthereumAddress.fromHex(hex);
      }).bind(this));
    }
    isMining() {
      return this[_makeRPCCall](T$.boolL(), "eth_mining");
    }
    getMiningHashrate() {
      return this[_makeRPCCall](T$.StringL(), "eth_hashrate").then(T$.intL(), dart.fn(s => crypto.hexToInt(s).toInt(), T$.StringLTointL()));
    }
    getGasPrice() {
      return async.async(T$.EtherAmountL(), (function* getGasPrice() {
        let data = (yield this[_makeRPCCall](T$.StringL(), "eth_gasPrice"));
        return web3dart.EtherAmount.fromUnitAndValue(web3dart.EtherUnit.wei, crypto.hexToInt(data));
      }).bind(this));
    }
    getBlockNumber() {
      return this[_makeRPCCall](T$.StringL(), "eth_blockNumber").then(T$.intL(), dart.fn(s => crypto.hexToInt(s).toInt(), T$.StringLTointL()));
    }
    getBalance(address, opts) {
      let atBlock = opts && 'atBlock' in opts ? opts.atBlock : null;
      let blockParam = this[_getBlockParam](atBlock);
      return this[_makeRPCCall](T$.StringL(), "eth_getBalance", [address.hex, blockParam]).then(T$.EtherAmountL(), dart.fn(data => web3dart.EtherAmount.fromUnitAndValue(web3dart.EtherUnit.wei, crypto.hexToInt(data)), T$.StringLToEtherAmountL()));
    }
    getStorage(address, position, opts) {
      let atBlock = opts && 'atBlock' in opts ? opts.atBlock : null;
      let blockParam = this[_getBlockParam](atBlock);
      return this[_makeRPCCall](T$.StringL(), "eth_getStorageAt", [address.hex, "0x" + dart.str(position.toRadixString(16)), blockParam]).then(T$.Uint8ListL(), C[9] || CT.C9);
    }
    getTransactionCount(address, opts) {
      let atBlock = opts && 'atBlock' in opts ? opts.atBlock : null;
      let blockParam = this[_getBlockParam](atBlock);
      return this[_makeRPCCall](T$.StringL(), "eth_getTransactionCount", [address.hex, blockParam]).then(T$.intL(), dart.fn(hex => crypto.hexToInt(hex).toInt(), T$.StringLTointL()));
    }
    getTransactionByHash(transactionHash) {
      return this[_makeRPCCall](T$.MapLOfStringL$dynamic(), "eth_getTransactionByHash", [transactionHash]).then(T$.TransactionInformationL(), dart.fn(s => new web3dart.TransactionInformation.fromMap(s), T$.MapLOfStringL$dynamicToTransactionInformationL()));
    }
    getTransactionReceipt(hash) {
      return this[_makeRPCCall](T$.MapLOfStringL$dynamic(), "eth_getTransactionReceipt", [hash]).then(T$.TransactionReceiptL(), dart.fn(s => s != null ? new web3dart.TransactionReceipt.fromJson(s) : null, T$.MapLOfStringL$dynamicToTransactionReceiptL()));
    }
    getCode(address, opts) {
      let atBlock = opts && 'atBlock' in opts ? opts.atBlock : null;
      return this[_makeRPCCall](T$.StringL(), "eth_getCode", [address.hex, this[_getBlockParam](atBlock)]).then(T$.Uint8ListL(), C[9] || CT.C9);
    }
    sendTransaction(cred, transaction, opts) {
      let chainId = opts && 'chainId' in opts ? opts.chainId : 1;
      let fetchChainIdFromNetworkId = opts && 'fetchChainIdFromNetworkId' in opts ? opts.fetchChainIdFromNetworkId : false;
      return async.async(T$.StringL(), (function* sendTransaction() {
        let signed = (yield this.signTransaction(cred, transaction, {chainId: chainId, fetchChainIdFromNetworkId: fetchChainIdFromNetworkId}));
        return this[_makeRPCCall](T$.StringL(), "eth_sendRawTransaction", [crypto.bytesToHex(signed, {include0x: true, padToEvenLength: true})]);
      }).bind(this));
    }
    signTransaction(cred, transaction, opts) {
      let chainId = opts && 'chainId' in opts ? opts.chainId : 1;
      let fetchChainIdFromNetworkId = opts && 'fetchChainIdFromNetworkId' in opts ? opts.fetchChainIdFromNetworkId : false;
      return async.async(T$.Uint8ListL(), (function* signTransaction() {
        let signingInput = (yield web3dart._fillMissingData({credentials: cred, transaction: transaction, chainId: chainId, loadChainIdFromNetwork: fetchChainIdFromNetworkId, client: this}));
        return this[_operations].signTransaction(signingInput);
      }).bind(this));
    }
    call(opts) {
      let sender = opts && 'sender' in opts ? opts.sender : null;
      let contract = opts && 'contract' in opts ? opts.contract : null;
      let $function = opts && 'function' in opts ? opts.function : null;
      let params = opts && 'params' in opts ? opts.params : null;
      let atBlock = opts && 'atBlock' in opts ? opts.atBlock : null;
      return async.async(T$.ListL(), (function* call() {
        let encodedResult = (yield this.callRaw({sender: sender, contract: contract.address, data: $function.encodeCall(params)}));
        return $function.decodeReturnValues(encodedResult);
      }).bind(this));
    }
    estimateGas(opts) {
      let sender = opts && 'sender' in opts ? opts.sender : null;
      let to = opts && 'to' in opts ? opts.to : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let amountOfGas = opts && 'amountOfGas' in opts ? opts.amountOfGas : null;
      let gasPrice = opts && 'gasPrice' in opts ? opts.gasPrice : null;
      let data = opts && 'data' in opts ? opts.data : null;
      let atBlock = opts && 'atBlock' in opts ? opts.atBlock : null;
      return async.async(T$.BigIntL(), (function* estimateGas() {
        let amountHex = (yield this[_makeRPCCall](T$.StringL(), "eth_estimateGas", [(() => {
            let t1 = new (T$.IdentityMapOfStringL$StringL()).new();
            if (sender != null) t1[$_set]("from", sender.hex);
            if (to != null) t1[$_set]("to", to.hex);
            if (amountOfGas != null) t1[$_set]("gas", "0x" + dart.str(amountOfGas.toRadixString(16)));
            if (gasPrice != null) t1[$_set]("gasPrice", "0x" + dart.str(amountOfGas.toRadixString(16)));
            if (data != null) t1[$_set]("data", crypto.bytesToHex(data, {include0x: true}));
            return t1;
          })()]));
        return crypto.hexToInt(amountHex);
      }).bind(this));
    }
    callRaw(opts) {
      let sender = opts && 'sender' in opts ? opts.sender : null;
      let contract = opts && 'contract' in opts ? opts.contract : null;
      let data = opts && 'data' in opts ? opts.data : null;
      let atBlock = opts && 'atBlock' in opts ? opts.atBlock : null;
      let call = new (T$.IdentityMapOfStringL$StringL()).from(["to", contract.hex, "data", crypto.bytesToHex(data, {include0x: true, padToEvenLength: true})]);
      if (sender != null) {
        call[$_set]("from", sender.hex);
      }
      return this[_makeRPCCall](T$.StringL(), "eth_call", [call, this[_getBlockParam](atBlock)]);
    }
    addedBlocks() {
      return this[_filters].addFilter(T$.StringL(), new web3dart._NewBlockFilter.new());
    }
    pendingTransactions() {
      return this[_filters].addFilter(T$.StringL(), new web3dart._PendingTransactionsFilter.new());
    }
    events(options) {
      return this[_filters].addFilter(T$.FilterEventL(), new web3dart._EventFilter.new(options));
    }
    dispose() {
      return async.async(dart.void, (function* dispose() {
        let t2;
        yield this[_operations].stop();
        yield this[_filters].dispose();
        yield (t2 = this[_streamRpcPeer], t2 == null ? null : t2.close());
      }).bind(this));
    }
  };
  (web3dart.Web3Client.new = function(url, httpClient, opts) {
    let enableBackgroundIsolate = opts && 'enableBackgroundIsolate' in opts ? opts.enableBackgroundIsolate : false;
    let socketConnector = opts && 'socketConnector' in opts ? opts.socketConnector : null;
    this[_streamRpcPeer] = null;
    this[_operations] = null;
    this[_filters] = null;
    this[printErrors] = false;
    this[socketConnector$] = socketConnector;
    this[_jsonRpc] = new json_rpc.JsonRPC.new(url, httpClient);
    this[_operations] = new web3dart._ExpensiveOperations.new(enableBackgroundIsolate);
    this[_filters] = new web3dart._FilterEngine.new(this);
  }).prototype = web3dart.Web3Client.prototype;
  dart.addTypeTests(web3dart.Web3Client);
  dart.addTypeCaches(web3dart.Web3Client);
  dart.setMethodSignature(web3dart.Web3Client, () => ({
    __proto__: dart.getMethods(web3dart.Web3Client.__proto__),
    [_makeRPCCall]: dart.gFnType(T => [dart.legacy(async.Future$(dart.legacy(T))), [dart.legacy(core.String)], [dart.legacy(core.List)]]),
    [_connectWithPeer]: dart.fnType(dart.legacy(peer.Peer), []),
    [_getBlockParam]: dart.fnType(dart.legacy(core.String), [dart.legacy(web3dart.BlockNum)]),
    credentialsFromPrivateKey: dart.fnType(dart.legacy(async.Future$(dart.legacy(credentials.Credentials))), [dart.legacy(core.String)]),
    getClientVersion: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.String))), []),
    getNetworkId: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), []),
    isListeningForNetwork: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), []),
    getPeerCount: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), []),
    getEtherProtocolVersion: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), []),
    getSyncStatus: dart.fnType(dart.legacy(async.Future$(dart.legacy(web3dart.SyncInformation))), []),
    coinbaseAddress: dart.fnType(dart.legacy(async.Future$(dart.legacy(credentials.EthereumAddress))), []),
    isMining: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), []),
    getMiningHashrate: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), []),
    getGasPrice: dart.fnType(dart.legacy(async.Future$(dart.legacy(web3dart.EtherAmount))), []),
    getBlockNumber: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), []),
    getBalance: dart.fnType(dart.legacy(async.Future$(dart.legacy(web3dart.EtherAmount))), [dart.legacy(credentials.EthereumAddress)], {atBlock: dart.legacy(web3dart.BlockNum)}, {}),
    getStorage: dart.fnType(dart.legacy(async.Future$(dart.legacy(typed_data.Uint8List))), [dart.legacy(credentials.EthereumAddress), dart.legacy(core.BigInt)], {atBlock: dart.legacy(web3dart.BlockNum)}, {}),
    getTransactionCount: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), [dart.legacy(credentials.EthereumAddress)], {atBlock: dart.legacy(web3dart.BlockNum)}, {}),
    getTransactionByHash: dart.fnType(dart.legacy(async.Future$(dart.legacy(web3dart.TransactionInformation))), [dart.legacy(core.String)]),
    getTransactionReceipt: dart.fnType(dart.legacy(async.Future$(dart.legacy(web3dart.TransactionReceipt))), [dart.legacy(core.String)]),
    getCode: dart.fnType(dart.legacy(async.Future$(dart.legacy(typed_data.Uint8List))), [dart.legacy(credentials.EthereumAddress)], {atBlock: dart.legacy(web3dart.BlockNum)}, {}),
    sendTransaction: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.String))), [dart.legacy(credentials.Credentials), dart.legacy(web3dart.Transaction)], {chainId: dart.legacy(core.int), fetchChainIdFromNetworkId: dart.legacy(core.bool)}, {}),
    signTransaction: dart.fnType(dart.legacy(async.Future$(dart.legacy(typed_data.Uint8List))), [dart.legacy(credentials.Credentials), dart.legacy(web3dart.Transaction)], {chainId: dart.legacy(core.int), fetchChainIdFromNetworkId: dart.legacy(core.bool)}, {}),
    call: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List))), [], {atBlock: dart.legacy(web3dart.BlockNum), contract: dart.legacy(contracts.DeployedContract), function: dart.legacy(contracts.ContractFunction), params: dart.legacy(core.List), sender: dart.legacy(credentials.EthereumAddress)}, {}),
    estimateGas: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.BigInt))), [], {amountOfGas: dart.legacy(core.BigInt), atBlock: dart.legacy(web3dart.BlockNum), data: dart.legacy(typed_data.Uint8List), gasPrice: dart.legacy(web3dart.EtherAmount), sender: dart.legacy(credentials.EthereumAddress), to: dart.legacy(credentials.EthereumAddress), value: dart.legacy(web3dart.EtherAmount)}, {}),
    callRaw: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.String))), [], {atBlock: dart.legacy(web3dart.BlockNum), contract: dart.legacy(credentials.EthereumAddress), data: dart.legacy(typed_data.Uint8List), sender: dart.legacy(credentials.EthereumAddress)}, {}),
    addedBlocks: dart.fnType(dart.legacy(async.Stream$(dart.legacy(core.String))), []),
    pendingTransactions: dart.fnType(dart.legacy(async.Stream$(dart.legacy(core.String))), []),
    events: dart.fnType(dart.legacy(async.Stream$(dart.legacy(web3dart.FilterEvent))), [dart.legacy(web3dart.FilterOptions)]),
    dispose: dart.fnType(dart.legacy(async.Future$(dart.void)), [])
  }));
  dart.setLibraryUri(web3dart.Web3Client, I[0]);
  dart.setFieldSignature(web3dart.Web3Client, () => ({
    __proto__: dart.getFields(web3dart.Web3Client.__proto__),
    [_jsonRpc]: dart.finalFieldType(dart.legacy(json_rpc.JsonRPC)),
    socketConnector: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(stream_channel.StreamChannel$(dart.legacy(core.String))), []))),
    [_streamRpcPeer]: dart.fieldType(dart.legacy(peer.Peer)),
    [_operations]: dart.fieldType(dart.legacy(web3dart._ExpensiveOperations)),
    [_filters]: dart.fieldType(dart.legacy(web3dart._FilterEngine)),
    printErrors: dart.fieldType(dart.legacy(core.bool))
  }));
  dart.defineLazy(web3dart.Web3Client, {
    /*web3dart.Web3Client._defaultBlock*/get _defaultBlock() {
      return C[10] || CT.C10;
    }
  }, true);
  var _runnerCompleter = dart.privateName(web3dart, "_runnerCompleter");
  var _start = dart.privateName(web3dart, "_start");
  web3dart._ExpensiveOperations = class _ExpensiveOperations extends core.Object {
    [_start]() {
      return async.async(dart.void, (function* _start() {
        if (dart.test(this.runInBackground)) {
          this[_runnerCompleter].complete(isolate_runner.IsolateRunner.spawn());
        } else {
          this[_runnerCompleter].complete(new runner.Runner.new());
        }
      }).bind(this));
    }
    stop() {
      return async.async(dart.dynamic, (function* stop() {
        if (!dart.test(this.runInBackground)) {
          return;
        }
        let runner = T$.IsolateRunnerL().as(yield this[_runnerCompleter].future);
        yield runner.kill();
      }).bind(this));
    }
    privateKeyFromHex(privateKey) {
      return async.async(T$.EthPrivateKeyL(), (function* privateKeyFromHex() {
        let runner = (yield this[_runnerCompleter].future);
        return runner.run(T$.EthPrivateKeyL(), T$.StringL(), C[11] || CT.C11, privateKey);
      }).bind(this));
    }
    signTransaction(t) {
      return async.async(T$.Uint8ListL(), (function* signTransaction() {
        if (!dart.test(t.credentials.isolateSafe)) {
          return web3dart.internalSign(t);
        } else {
          let runner = (yield this[_runnerCompleter].future);
          return runner.run(T$.Uint8ListL(), T$._SigningInputL(), C[12] || CT.C12, t);
        }
      }).bind(this));
    }
  };
  (web3dart._ExpensiveOperations.new = function(runInBackground) {
    this[_runnerCompleter] = T$.CompleterOfRunnerL().new();
    this.runInBackground = runInBackground;
    this[_start]();
  }).prototype = web3dart._ExpensiveOperations.prototype;
  dart.addTypeTests(web3dart._ExpensiveOperations);
  dart.addTypeCaches(web3dart._ExpensiveOperations);
  dart.setMethodSignature(web3dart._ExpensiveOperations, () => ({
    __proto__: dart.getMethods(web3dart._ExpensiveOperations.__proto__),
    [_start]: dart.fnType(dart.void, []),
    stop: dart.fnType(dart.legacy(async.Future), []),
    privateKeyFromHex: dart.fnType(dart.legacy(async.Future$(dart.legacy(credentials.EthPrivateKey))), [dart.legacy(core.String)]),
    signTransaction: dart.fnType(dart.legacy(async.Future$(dart.legacy(typed_data.Uint8List))), [dart.legacy(web3dart._SigningInput)])
  }));
  dart.setLibraryUri(web3dart._ExpensiveOperations, I[0]);
  dart.setFieldSignature(web3dart._ExpensiveOperations, () => ({
    __proto__: dart.getFields(web3dart._ExpensiveOperations.__proto__),
    [_runnerCompleter]: dart.finalFieldType(dart.legacy(async.Completer$(dart.legacy(runner.Runner)))),
    runInBackground: dart.finalFieldType(dart.legacy(core.bool))
  }));
  web3dart._FilterCreationParams = class _FilterCreationParams extends core.Object {};
  (web3dart._FilterCreationParams.new = function(method, params) {
    this.method = method;
    this.params = params;
    ;
  }).prototype = web3dart._FilterCreationParams.prototype;
  dart.addTypeTests(web3dart._FilterCreationParams);
  dart.addTypeCaches(web3dart._FilterCreationParams);
  dart.setLibraryUri(web3dart._FilterCreationParams, I[0]);
  dart.setFieldSignature(web3dart._FilterCreationParams, () => ({
    __proto__: dart.getFields(web3dart._FilterCreationParams.__proto__),
    method: dart.finalFieldType(dart.legacy(core.String)),
    params: dart.finalFieldType(dart.legacy(core.List))
  }));
  web3dart._PubSubCreationParams = class _PubSubCreationParams extends core.Object {};
  (web3dart._PubSubCreationParams.new = function(params) {
    this.params = params;
    ;
  }).prototype = web3dart._PubSubCreationParams.prototype;
  dart.addTypeTests(web3dart._PubSubCreationParams);
  dart.addTypeCaches(web3dart._PubSubCreationParams);
  dart.setLibraryUri(web3dart._PubSubCreationParams, I[0]);
  dart.setFieldSignature(web3dart._PubSubCreationParams, () => ({
    __proto__: dart.getFields(web3dart._PubSubCreationParams.__proto__),
    params: dart.finalFieldType(dart.legacy(core.List))
  }));
  const _is__Filter_default = Symbol('_is__Filter_default');
  web3dart._Filter$ = dart.generic(T => {
    class _Filter extends core.Object {}
    (_Filter.new = function() {
      ;
    }).prototype = _Filter.prototype;
    dart.addTypeTests(_Filter);
    _Filter.prototype[_is__Filter_default] = true;
    dart.addTypeCaches(_Filter);
    dart.setLibraryUri(_Filter, I[0]);
    return _Filter;
  });
  web3dart._Filter = web3dart._Filter$();
  dart.addTypeTests(web3dart._Filter, _is__Filter_default);
  web3dart._NewBlockFilter = class _NewBlockFilter extends web3dart._Filter$(dart.legacy(core.String)) {
    create() {
      return new web3dart._FilterCreationParams.new("eth_newBlockFilter", []);
    }
    parseChanges(log) {
      return T$.StringL().as(log);
    }
    createPubSub() {
      return null;
    }
  };
  (web3dart._NewBlockFilter.new = function() {
    ;
  }).prototype = web3dart._NewBlockFilter.prototype;
  dart.addTypeTests(web3dart._NewBlockFilter);
  dart.addTypeCaches(web3dart._NewBlockFilter);
  dart.setMethodSignature(web3dart._NewBlockFilter, () => ({
    __proto__: dart.getMethods(web3dart._NewBlockFilter.__proto__),
    create: dart.fnType(dart.legacy(web3dart._FilterCreationParams), []),
    parseChanges: dart.fnType(dart.legacy(core.String), [dart.dynamic]),
    createPubSub: dart.fnType(dart.legacy(web3dart._PubSubCreationParams), [])
  }));
  dart.setLibraryUri(web3dart._NewBlockFilter, I[0]);
  web3dart._PendingTransactionsFilter = class _PendingTransactionsFilter extends web3dart._Filter$(dart.legacy(core.String)) {
    create() {
      return new web3dart._FilterCreationParams.new("eth_newPendingTransactionFilter", []);
    }
    parseChanges(log) {
      return T$.StringL().as(log);
    }
    createPubSub() {
      return null;
    }
  };
  (web3dart._PendingTransactionsFilter.new = function() {
    ;
  }).prototype = web3dart._PendingTransactionsFilter.prototype;
  dart.addTypeTests(web3dart._PendingTransactionsFilter);
  dart.addTypeCaches(web3dart._PendingTransactionsFilter);
  dart.setMethodSignature(web3dart._PendingTransactionsFilter, () => ({
    __proto__: dart.getMethods(web3dart._PendingTransactionsFilter.__proto__),
    create: dart.fnType(dart.legacy(web3dart._FilterCreationParams), []),
    parseChanges: dart.fnType(dart.legacy(core.String), [dart.dynamic]),
    createPubSub: dart.fnType(dart.legacy(web3dart._PubSubCreationParams), [])
  }));
  dart.setLibraryUri(web3dart._PendingTransactionsFilter, I[0]);
  var fromBlock$ = dart.privateName(web3dart, "FilterOptions.fromBlock");
  var toBlock$ = dart.privateName(web3dart, "FilterOptions.toBlock");
  var address$ = dart.privateName(web3dart, "FilterOptions.address");
  var topics$ = dart.privateName(web3dart, "FilterOptions.topics");
  web3dart.FilterOptions = class FilterOptions extends core.Object {
    get fromBlock() {
      return this[fromBlock$];
    }
    set fromBlock(value) {
      super.fromBlock = value;
    }
    get toBlock() {
      return this[toBlock$];
    }
    set toBlock(value) {
      super.toBlock = value;
    }
    get address() {
      return this[address$];
    }
    set address(value) {
      super.address = value;
    }
    get topics() {
      return this[topics$];
    }
    set topics(value) {
      super.topics = value;
    }
  };
  (web3dart.FilterOptions.new = function(opts) {
    let fromBlock = opts && 'fromBlock' in opts ? opts.fromBlock : null;
    let toBlock = opts && 'toBlock' in opts ? opts.toBlock : null;
    let address = opts && 'address' in opts ? opts.address : null;
    let topics = opts && 'topics' in opts ? opts.topics : null;
    this[fromBlock$] = fromBlock;
    this[toBlock$] = toBlock;
    this[address$] = address;
    this[topics$] = topics;
    ;
  }).prototype = web3dart.FilterOptions.prototype;
  (web3dart.FilterOptions.events = function(opts) {
    let contract = opts && 'contract' in opts ? opts.contract : null;
    let event = opts && 'event' in opts ? opts.event : null;
    let fromBlock = opts && 'fromBlock' in opts ? opts.fromBlock : null;
    let toBlock = opts && 'toBlock' in opts ? opts.toBlock : null;
    this[fromBlock$] = fromBlock;
    this[toBlock$] = toBlock;
    this[address$] = contract.address;
    this[topics$] = T$.JSArrayOfListLOfStringL().of([T$.JSArrayOfStringL().of([crypto.bytesToHex(event.signature, {padToEvenLength: true, include0x: true})])]);
    ;
  }).prototype = web3dart.FilterOptions.prototype;
  dart.addTypeTests(web3dart.FilterOptions);
  dart.addTypeCaches(web3dart.FilterOptions);
  dart.setLibraryUri(web3dart.FilterOptions, I[0]);
  dart.setFieldSignature(web3dart.FilterOptions, () => ({
    __proto__: dart.getFields(web3dart.FilterOptions.__proto__),
    fromBlock: dart.finalFieldType(dart.legacy(web3dart.BlockNum)),
    toBlock: dart.finalFieldType(dart.legacy(web3dart.BlockNum)),
    address: dart.finalFieldType(dart.legacy(credentials.EthereumAddress)),
    topics: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.List$(dart.legacy(core.String))))))
  }));
  var removed$ = dart.privateName(web3dart, "FilterEvent.removed");
  var logIndex$ = dart.privateName(web3dart, "FilterEvent.logIndex");
  var transactionIndex$ = dart.privateName(web3dart, "FilterEvent.transactionIndex");
  var transactionHash$ = dart.privateName(web3dart, "FilterEvent.transactionHash");
  var blockHash$ = dart.privateName(web3dart, "FilterEvent.blockHash");
  var blockNum$0 = dart.privateName(web3dart, "FilterEvent.blockNum");
  var address$0 = dart.privateName(web3dart, "FilterEvent.address");
  var data$ = dart.privateName(web3dart, "FilterEvent.data");
  var topics$0 = dart.privateName(web3dart, "FilterEvent.topics");
  web3dart.FilterEvent = class FilterEvent extends core.Object {
    get removed() {
      return this[removed$];
    }
    set removed(value) {
      super.removed = value;
    }
    get logIndex() {
      return this[logIndex$];
    }
    set logIndex(value) {
      super.logIndex = value;
    }
    get transactionIndex() {
      return this[transactionIndex$];
    }
    set transactionIndex(value) {
      super.transactionIndex = value;
    }
    get transactionHash() {
      return this[transactionHash$];
    }
    set transactionHash(value) {
      super.transactionHash = value;
    }
    get blockHash() {
      return this[blockHash$];
    }
    set blockHash(value) {
      super.blockHash = value;
    }
    get blockNum() {
      return this[blockNum$0];
    }
    set blockNum(value) {
      super.blockNum = value;
    }
    get address() {
      return this[address$0];
    }
    set address(value) {
      super.address = value;
    }
    get data() {
      return this[data$];
    }
    set data(value) {
      super.data = value;
    }
    get topics() {
      return this[topics$0];
    }
    set topics(value) {
      super.topics = value;
    }
    toString() {
      return "FilterEvent(" + "removed=" + dart.str(this.removed) + "," + "logIndex=" + dart.str(this.logIndex) + "," + "transactionIndex=" + dart.str(this.transactionIndex) + "," + "transactionHash=" + dart.str(this.transactionHash) + "," + "blockHash=" + dart.str(this.blockHash) + "," + "blockNum=" + dart.str(this.blockNum) + "," + "address=" + dart.str(this.address) + "," + "data=" + dart.str(this.data) + "," + "topics=" + dart.str(this.topics) + ")";
    }
  };
  (web3dart.FilterEvent.new = function(opts) {
    let removed = opts && 'removed' in opts ? opts.removed : null;
    let logIndex = opts && 'logIndex' in opts ? opts.logIndex : null;
    let transactionIndex = opts && 'transactionIndex' in opts ? opts.transactionIndex : null;
    let transactionHash = opts && 'transactionHash' in opts ? opts.transactionHash : null;
    let blockHash = opts && 'blockHash' in opts ? opts.blockHash : null;
    let blockNum = opts && 'blockNum' in opts ? opts.blockNum : null;
    let address = opts && 'address' in opts ? opts.address : null;
    let data = opts && 'data' in opts ? opts.data : null;
    let topics = opts && 'topics' in opts ? opts.topics : null;
    this[removed$] = removed;
    this[logIndex$] = logIndex;
    this[transactionIndex$] = transactionIndex;
    this[transactionHash$] = transactionHash;
    this[blockHash$] = blockHash;
    this[blockNum$0] = blockNum;
    this[address$0] = address;
    this[data$] = data;
    this[topics$0] = topics;
    ;
  }).prototype = web3dart.FilterEvent.prototype;
  dart.addTypeTests(web3dart.FilterEvent);
  dart.addTypeCaches(web3dart.FilterEvent);
  dart.setMethodSignature(web3dart.FilterEvent, () => ({
    __proto__: dart.getMethods(web3dart.FilterEvent.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(web3dart.FilterEvent, I[0]);
  dart.setFieldSignature(web3dart.FilterEvent, () => ({
    __proto__: dart.getFields(web3dart.FilterEvent.__proto__),
    removed: dart.finalFieldType(dart.legacy(core.bool)),
    logIndex: dart.finalFieldType(dart.legacy(core.int)),
    transactionIndex: dart.finalFieldType(dart.legacy(core.int)),
    transactionHash: dart.finalFieldType(dart.legacy(core.String)),
    blockHash: dart.finalFieldType(dart.legacy(core.String)),
    blockNum: dart.finalFieldType(dart.legacy(core.int)),
    address: dart.finalFieldType(dart.legacy(credentials.EthereumAddress)),
    data: dart.finalFieldType(dart.legacy(core.String)),
    topics: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.String))))
  }));
  dart.defineExtensionMethods(web3dart.FilterEvent, ['toString']);
  var _createParamsObject = dart.privateName(web3dart, "_createParamsObject");
  web3dart._EventFilter = class _EventFilter extends web3dart._Filter$(dart.legacy(web3dart.FilterEvent)) {
    create() {
      return new web3dart._FilterCreationParams.new("eth_newFilter", [this[_createParamsObject](true)]);
    }
    createPubSub() {
      return new web3dart._PubSubCreationParams.new(["logs", this[_createParamsObject](false)]);
    }
    [_createParamsObject](includeFromAndTo) {
      let encodedOptions = new (T$.IdentityMapOfStringL$dynamic()).new();
      if (this.options.fromBlock != null && dart.test(includeFromAndTo)) {
        encodedOptions[$_set]("fromBlock", this.options.fromBlock.toBlockParam());
      }
      if (this.options.toBlock != null && dart.test(includeFromAndTo)) {
        encodedOptions[$_set]("toBlock", this.options.toBlock.toBlockParam());
      }
      if (this.options.address != null) {
        encodedOptions[$_set]("address", this.options.address.hex);
      }
      if (this.options.topics != null) {
        encodedOptions[$_set]("topics", this.options.topics);
      }
      return encodedOptions;
    }
    parseChanges(log) {
      let t2;
      return new web3dart.FilterEvent.new({removed: (t2 = T$.boolL().as(dart.dsend(log, '_get', ["removed"])), t2 == null ? false : t2), logIndex: crypto.hexToInt(T$.StringL().as(dart.dsend(log, '_get', ["logIndex"]))).toInt(), transactionIndex: crypto.hexToInt(T$.StringL().as(dart.dsend(log, '_get', ["logIndex"]))).toInt(), transactionHash: T$.StringL().as(dart.dsend(log, '_get', ["transactionHash"])), blockHash: T$.StringL().as(dart.dsend(log, '_get', ["blockHash"])), blockNum: crypto.hexToInt(T$.StringL().as(dart.dsend(log, '_get', ["blockNumber"]))).toInt(), address: credentials.EthereumAddress.fromHex(T$.StringL().as(dart.dsend(log, '_get', ["address"]))), data: T$.StringL().as(dart.dsend(log, '_get', ["data"])), topics: T$.ListL().as(dart.dsend(log, '_get', ["topics"]))[$cast](T$.StringL())});
    }
  };
  (web3dart._EventFilter.new = function(options) {
    this.options = options;
    ;
  }).prototype = web3dart._EventFilter.prototype;
  dart.addTypeTests(web3dart._EventFilter);
  dart.addTypeCaches(web3dart._EventFilter);
  dart.setMethodSignature(web3dart._EventFilter, () => ({
    __proto__: dart.getMethods(web3dart._EventFilter.__proto__),
    create: dart.fnType(dart.legacy(web3dart._FilterCreationParams), []),
    createPubSub: dart.fnType(dart.legacy(web3dart._PubSubCreationParams), []),
    [_createParamsObject]: dart.fnType(dart.dynamic, [dart.legacy(core.bool)]),
    parseChanges: dart.fnType(dart.legacy(web3dart.FilterEvent), [dart.dynamic])
  }));
  dart.setLibraryUri(web3dart._EventFilter, I[0]);
  dart.setFieldSignature(web3dart._EventFilter, () => ({
    __proto__: dart.getFields(web3dart._EventFilter.__proto__),
    options: dart.finalFieldType(dart.legacy(web3dart.FilterOptions))
  }));
  var _ticker = dart.privateName(web3dart, "_ticker");
  var _isRefreshing = dart.privateName(web3dart, "_isRefreshing");
  var _clearingBecauseSocketClosed = dart.privateName(web3dart, "_clearingBecauseSocketClosed");
  var _pendingUnsubcriptions = dart.privateName(web3dart, "_pendingUnsubcriptions");
  var _client$ = dart.privateName(web3dart, "_client");
  var _rpc = dart.privateName(web3dart, "_rpc");
  var _registerToPubSub = dart.privateName(web3dart, "_registerToPubSub");
  var _registerToAPI = dart.privateName(web3dart, "_registerToAPI");
  var _startTicking = dart.privateName(web3dart, "_startTicking");
  var _controller = dart.privateName(web3dart, "_controller");
  var _refreshFilters = dart.privateName(web3dart, "_refreshFilters");
  var _parseAndAdd = dart.privateName(web3dart, "_parseAndAdd");
  web3dart._FilterEngine = class _FilterEngine extends core.Object {
    get [_rpc]() {
      return this[_client$][_jsonRpc];
    }
    addFilter(T, filter) {
      let pubSubParams = filter.createPubSub();
      let pubSubAvailable = this[_client$].socketConnector != null;
      let supportsPubSub = pubSubParams != null && pubSubAvailable;
      let instantiated = null;
      instantiated = new (web3dart._InstantiatedFilter$(dart.legacy(T))).new(filter, supportsPubSub, dart.fn(() => {
        this[_pendingUnsubcriptions][$add](this.uninstall(instantiated));
      }, T$.VoidToNull()));
      this[_filters][$add](instantiated);
      if (dart.test(instantiated.isPubSub)) {
        this[_registerToPubSub](instantiated, pubSubParams);
      } else {
        this[_registerToAPI](instantiated);
        this[_startTicking]();
      }
      return instantiated[_controller].stream;
    }
    [_registerToAPI](filter) {
      return async.async(dart.void, (function* _registerToAPI() {
        let request = filter.filter.create();
        try {
          let response = (yield this[_rpc].call(request.method, request.params));
          filter.id = T$.StringL().as(response.result);
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (T$.RPCErrorL().is(e)) {
            filter[_controller].addError(e, s);
            yield filter[_controller].close();
            this[_filters][$remove](filter);
          } else
            throw e$;
        }
      }).bind(this));
    }
    [_registerToPubSub](filter, params) {
      return async.async(dart.void, (function* _registerToPubSub() {
        let peer = this[_client$][_connectWithPeer]();
        try {
          let response = (yield peer.sendRequest("eth_subscribe", params.params));
          filter.id = T$.StringL().as(response);
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (T$.RpcExceptionL().is(e)) {
            filter[_controller].addError(e, s);
            yield filter[_controller].close();
            this[_filters][$remove](filter);
          } else
            throw e$;
        }
      }).bind(this));
    }
    [_startTicking]() {
      this[_ticker] == null ? this[_ticker] = async.Timer.periodic(web3dart._pingDuration, dart.fn(_ => this[_refreshFilters](), T$.TimerLTovoid())) : null;
    }
    [_refreshFilters]() {
      return async.async(dart.void, (function* _refreshFilters() {
        if (dart.test(this[_isRefreshing])) return;
        this[_isRefreshing] = true;
        try {
          let filterSnapshot = T$.ListOf_InstantiatedFilterL().of(this[_filters]);
          for (let filter of filterSnapshot) {
            let updatedData = (yield this[_rpc].call("eth_getFilterChanges", [filter.id]));
            for (let payload of T$.IterableL().as(updatedData.result)) {
              if (!dart.test(filter[_controller].isClosed)) {
                this[_parseAndAdd](filter, payload);
              }
            }
          }
        } finally {
          this[_isRefreshing] = false;
        }
      }).bind(this));
    }
    handlePubSubNotification(params) {
      let id = params._get("subscription").asString;
      let result = params._get("result").value;
      let filter = this[_filters][$singleWhere](dart.fn(f => dart.test(f.isPubSub) && f.id == id, T$._InstantiatedFilterLToboolL()), {orElse: dart.fn(() => null, T$.VoidToNull())});
      this[_parseAndAdd](filter, result);
    }
    handleConnectionClosed() {
      try {
        this[_clearingBecauseSocketClosed] = true;
        let pubSubFilters = this[_filters][$where](dart.fn(f => f.isPubSub, T$._InstantiatedFilterLToboolL()))[$toList]();
        for (let filter of pubSubFilters) {
          this.uninstall(filter);
        }
      } finally {
        this[_clearingBecauseSocketClosed] = false;
      }
    }
    [_parseAndAdd](filter, payload) {
      let parsed = filter.filter.parseChanges(payload);
      filter[_controller].add(parsed);
    }
    uninstall(filter) {
      return async.async(dart.dynamic, (function* uninstall() {
        yield filter[_controller].close();
        this[_filters][$remove](filter);
        if (dart.test(filter.isPubSub) && !dart.test(this[_clearingBecauseSocketClosed])) {
          let connection = this[_client$][_connectWithPeer]();
          yield connection.sendRequest("eth_unsubscribe", T$.JSArrayOfStringL().of([filter.id]));
        } else {
          yield this[_rpc].call("eth_uninstallFilter", [filter.id]);
        }
      }).bind(this));
    }
    dispose() {
      return async.async(dart.dynamic, (function* dispose() {
        let t4;
        t4 = this[_ticker];
        t4 == null ? null : t4.cancel();
        let remainingFilters = T$.ListOf_InstantiatedFilterL().of(this[_filters]);
        yield async.Future.forEach(T$._InstantiatedFilterL(), remainingFilters, dart.bind(this, 'uninstall'));
        yield async.Future.wait(dart.dynamic, this[_pendingUnsubcriptions]);
        this[_pendingUnsubcriptions][$clear]();
      }).bind(this));
    }
  };
  (web3dart._FilterEngine.new = function(_client) {
    this[_filters] = T$.JSArrayOf_InstantiatedFilterL().of([]);
    this[_ticker] = null;
    this[_isRefreshing] = false;
    this[_clearingBecauseSocketClosed] = false;
    this[_pendingUnsubcriptions] = T$.JSArrayOfFutureL().of([]);
    this[_client$] = _client;
    ;
  }).prototype = web3dart._FilterEngine.prototype;
  dart.addTypeTests(web3dart._FilterEngine);
  dart.addTypeCaches(web3dart._FilterEngine);
  dart.setMethodSignature(web3dart._FilterEngine, () => ({
    __proto__: dart.getMethods(web3dart._FilterEngine.__proto__),
    addFilter: dart.gFnType(T => [dart.legacy(async.Stream$(dart.legacy(T))), [dart.legacy(web3dart._Filter$(dart.legacy(T)))]]),
    [_registerToAPI]: dart.fnType(dart.void, [dart.legacy(web3dart._InstantiatedFilter)]),
    [_registerToPubSub]: dart.fnType(dart.void, [dart.legacy(web3dart._InstantiatedFilter), dart.legacy(web3dart._PubSubCreationParams)]),
    [_startTicking]: dart.fnType(dart.void, []),
    [_refreshFilters]: dart.fnType(dart.void, []),
    handlePubSubNotification: dart.fnType(dart.void, [dart.legacy(parameters.Parameters)]),
    handleConnectionClosed: dart.fnType(dart.void, []),
    [_parseAndAdd]: dart.fnType(dart.void, [dart.legacy(web3dart._InstantiatedFilter), dart.dynamic]),
    uninstall: dart.fnType(dart.legacy(async.Future), [dart.legacy(web3dart._InstantiatedFilter)]),
    dispose: dart.fnType(dart.legacy(async.Future), [])
  }));
  dart.setGetterSignature(web3dart._FilterEngine, () => ({
    __proto__: dart.getGetters(web3dart._FilterEngine.__proto__),
    [_rpc]: dart.legacy(json_rpc.JsonRPC)
  }));
  dart.setLibraryUri(web3dart._FilterEngine, I[0]);
  dart.setFieldSignature(web3dart._FilterEngine, () => ({
    __proto__: dart.getFields(web3dart._FilterEngine.__proto__),
    [_filters]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(web3dart._InstantiatedFilter)))),
    [_client$]: dart.finalFieldType(dart.legacy(web3dart.Web3Client)),
    [_ticker]: dart.fieldType(dart.legacy(async.Timer)),
    [_isRefreshing]: dart.fieldType(dart.legacy(core.bool)),
    [_clearingBecauseSocketClosed]: dart.fieldType(dart.legacy(core.bool)),
    [_pendingUnsubcriptions]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(async.Future))))
  }));
  const _is__InstantiatedFilter_default = Symbol('_is__InstantiatedFilter_default');
  web3dart._InstantiatedFilter$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var StreamControllerOfTL = () => (StreamControllerOfTL = dart.constFn(async.StreamController$(TL())))();
    class _InstantiatedFilter extends core.Object {}
    (_InstantiatedFilter.new = function(filter, isPubSub, onCancel) {
      this.id = null;
      this.filter = filter;
      this.isPubSub = isPubSub;
      this[_controller] = StreamControllerOfTL().new({onCancel: onCancel});
      ;
    }).prototype = _InstantiatedFilter.prototype;
    dart.addTypeTests(_InstantiatedFilter);
    _InstantiatedFilter.prototype[_is__InstantiatedFilter_default] = true;
    dart.addTypeCaches(_InstantiatedFilter);
    dart.setLibraryUri(_InstantiatedFilter, I[0]);
    dart.setFieldSignature(_InstantiatedFilter, () => ({
      __proto__: dart.getFields(_InstantiatedFilter.__proto__),
      id: dart.fieldType(dart.legacy(core.String)),
      filter: dart.finalFieldType(dart.legacy(web3dart._Filter$(dart.legacy(T)))),
      isPubSub: dart.finalFieldType(dart.legacy(core.bool)),
      [_controller]: dart.finalFieldType(dart.legacy(async.StreamController$(dart.legacy(T))))
    }));
    return _InstantiatedFilter;
  });
  web3dart._InstantiatedFilter = web3dart._InstantiatedFilter$();
  dart.addTypeTests(web3dart._InstantiatedFilter, _is__InstantiatedFilter_default);
  var startingBlock$ = dart.privateName(web3dart, "SyncInformation.startingBlock");
  var currentBlock$ = dart.privateName(web3dart, "SyncInformation.currentBlock");
  var finalBlock$ = dart.privateName(web3dart, "SyncInformation.finalBlock");
  web3dart.SyncInformation = class SyncInformation extends core.Object {
    get startingBlock() {
      return this[startingBlock$];
    }
    set startingBlock(value) {
      super.startingBlock = value;
    }
    get currentBlock() {
      return this[currentBlock$];
    }
    set currentBlock(value) {
      super.currentBlock = value;
    }
    get finalBlock() {
      return this[finalBlock$];
    }
    set finalBlock(value) {
      super.finalBlock = value;
    }
    get isSyncing() {
      return this.startingBlock != null;
    }
    toString() {
      if (dart.test(this.isSyncing))
        return "SyncInformation: from " + dart.str(this.startingBlock) + " to " + dart.str(this.finalBlock) + ", current: " + dart.str(this.currentBlock);
      else
        return "SyncInformation: Currently not performing a synchronisation";
    }
  };
  (web3dart.SyncInformation.__ = function(startingBlock, currentBlock, finalBlock) {
    this[startingBlock$] = startingBlock;
    this[currentBlock$] = currentBlock;
    this[finalBlock$] = finalBlock;
    ;
  }).prototype = web3dart.SyncInformation.prototype;
  dart.addTypeTests(web3dart.SyncInformation);
  dart.addTypeCaches(web3dart.SyncInformation);
  dart.setMethodSignature(web3dart.SyncInformation, () => ({
    __proto__: dart.getMethods(web3dart.SyncInformation.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(web3dart.SyncInformation, () => ({
    __proto__: dart.getGetters(web3dart.SyncInformation.__proto__),
    isSyncing: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(web3dart.SyncInformation, I[0]);
  dart.setFieldSignature(web3dart.SyncInformation, () => ({
    __proto__: dart.getFields(web3dart.SyncInformation.__proto__),
    startingBlock: dart.finalFieldType(dart.legacy(core.int)),
    currentBlock: dart.finalFieldType(dart.legacy(core.int)),
    finalBlock: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(web3dart.SyncInformation, ['toString']);
  var from$ = dart.privateName(web3dart, "Transaction.from");
  var to$ = dart.privateName(web3dart, "Transaction.to");
  var maxGas$ = dart.privateName(web3dart, "Transaction.maxGas");
  var gasPrice$ = dart.privateName(web3dart, "Transaction.gasPrice");
  var value$ = dart.privateName(web3dart, "Transaction.value");
  var data$0 = dart.privateName(web3dart, "Transaction.data");
  var nonce$ = dart.privateName(web3dart, "Transaction.nonce");
  web3dart.Transaction = class Transaction extends core.Object {
    get from() {
      return this[from$];
    }
    set from(value) {
      super.from = value;
    }
    get to() {
      return this[to$];
    }
    set to(value) {
      super.to = value;
    }
    get maxGas() {
      return this[maxGas$];
    }
    set maxGas(value) {
      super.maxGas = value;
    }
    get gasPrice() {
      return this[gasPrice$];
    }
    set gasPrice(value) {
      super.gasPrice = value;
    }
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    get data() {
      return this[data$0];
    }
    set data(value) {
      super.data = value;
    }
    get nonce() {
      return this[nonce$];
    }
    set nonce(value) {
      super.nonce = value;
    }
    copyWith(opts) {
      let t4, t4$, t4$0, t4$1, t4$2, t4$3, t4$4;
      let from = opts && 'from' in opts ? opts.from : null;
      let to = opts && 'to' in opts ? opts.to : null;
      let maxGas = opts && 'maxGas' in opts ? opts.maxGas : null;
      let gasPrice = opts && 'gasPrice' in opts ? opts.gasPrice : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let data = opts && 'data' in opts ? opts.data : null;
      let nonce = opts && 'nonce' in opts ? opts.nonce : null;
      return new web3dart.Transaction.new({from: (t4 = from, t4 == null ? this.from : t4), to: (t4$ = to, t4$ == null ? this.to : t4$), maxGas: (t4$0 = maxGas, t4$0 == null ? this.maxGas : t4$0), gasPrice: (t4$1 = gasPrice, t4$1 == null ? this.gasPrice : t4$1), value: (t4$2 = value, t4$2 == null ? this.value : t4$2), data: (t4$3 = data, t4$3 == null ? this.data : t4$3), nonce: (t4$4 = nonce, t4$4 == null ? this.nonce : t4$4)});
    }
  };
  (web3dart.Transaction.new = function(opts) {
    let from = opts && 'from' in opts ? opts.from : null;
    let to = opts && 'to' in opts ? opts.to : null;
    let maxGas = opts && 'maxGas' in opts ? opts.maxGas : null;
    let gasPrice = opts && 'gasPrice' in opts ? opts.gasPrice : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let data = opts && 'data' in opts ? opts.data : null;
    let nonce = opts && 'nonce' in opts ? opts.nonce : null;
    this[from$] = from;
    this[to$] = to;
    this[maxGas$] = maxGas;
    this[gasPrice$] = gasPrice;
    this[value$] = value;
    this[data$0] = data;
    this[nonce$] = nonce;
    ;
  }).prototype = web3dart.Transaction.prototype;
  (web3dart.Transaction.callContract = function(opts) {
    let contract = opts && 'contract' in opts ? opts.contract : null;
    let $function = opts && 'function' in opts ? opts.function : null;
    let parameters = opts && 'parameters' in opts ? opts.parameters : null;
    let from = opts && 'from' in opts ? opts.from : null;
    let maxGas = opts && 'maxGas' in opts ? opts.maxGas : null;
    let gasPrice = opts && 'gasPrice' in opts ? opts.gasPrice : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let nonce = opts && 'nonce' in opts ? opts.nonce : null;
    this[from$] = from;
    this[maxGas$] = maxGas;
    this[gasPrice$] = gasPrice;
    this[value$] = value;
    this[nonce$] = nonce;
    this[to$] = contract.address;
    this[data$0] = $function.encodeCall(parameters);
    ;
  }).prototype = web3dart.Transaction.prototype;
  dart.addTypeTests(web3dart.Transaction);
  dart.addTypeCaches(web3dart.Transaction);
  dart.setMethodSignature(web3dart.Transaction, () => ({
    __proto__: dart.getMethods(web3dart.Transaction.__proto__),
    copyWith: dart.fnType(dart.legacy(web3dart.Transaction), [], {data: dart.legacy(typed_data.Uint8List), from: dart.legacy(credentials.EthereumAddress), gasPrice: dart.legacy(web3dart.EtherAmount), maxGas: dart.legacy(core.int), nonce: dart.legacy(core.int), to: dart.legacy(credentials.EthereumAddress), value: dart.legacy(web3dart.EtherAmount)}, {})
  }));
  dart.setLibraryUri(web3dart.Transaction, I[0]);
  dart.setFieldSignature(web3dart.Transaction, () => ({
    __proto__: dart.getFields(web3dart.Transaction.__proto__),
    from: dart.finalFieldType(dart.legacy(credentials.EthereumAddress)),
    to: dart.finalFieldType(dart.legacy(credentials.EthereumAddress)),
    maxGas: dart.finalFieldType(dart.legacy(core.int)),
    gasPrice: dart.finalFieldType(dart.legacy(web3dart.EtherAmount)),
    value: dart.finalFieldType(dart.legacy(web3dart.EtherAmount)),
    data: dart.finalFieldType(dart.legacy(typed_data.Uint8List)),
    nonce: dart.finalFieldType(dart.legacy(core.int))
  }));
  var blockHash = dart.privateName(web3dart, "TransactionInformation.blockHash");
  var blockNumber = dart.privateName(web3dart, "TransactionInformation.blockNumber");
  var from = dart.privateName(web3dart, "TransactionInformation.from");
  var gas = dart.privateName(web3dart, "TransactionInformation.gas");
  var gasPrice = dart.privateName(web3dart, "TransactionInformation.gasPrice");
  var hash = dart.privateName(web3dart, "TransactionInformation.hash");
  var input = dart.privateName(web3dart, "TransactionInformation.input");
  var nonce = dart.privateName(web3dart, "TransactionInformation.nonce");
  var to = dart.privateName(web3dart, "TransactionInformation.to");
  var transactionIndex = dart.privateName(web3dart, "TransactionInformation.transactionIndex");
  var value = dart.privateName(web3dart, "TransactionInformation.value");
  var v = dart.privateName(web3dart, "TransactionInformation.v");
  var r = dart.privateName(web3dart, "TransactionInformation.r");
  var s = dart.privateName(web3dart, "TransactionInformation.s");
  web3dart.TransactionInformation = class TransactionInformation extends core.Object {
    get blockHash() {
      return this[blockHash];
    }
    set blockHash(value) {
      super.blockHash = value;
    }
    get blockNumber() {
      return this[blockNumber];
    }
    set blockNumber(value) {
      super.blockNumber = value;
    }
    get from() {
      return this[from];
    }
    set from(value) {
      super.from = value;
    }
    get gas() {
      return this[gas];
    }
    set gas(value) {
      super.gas = value;
    }
    get gasPrice() {
      return this[gasPrice];
    }
    set gasPrice(value) {
      super.gasPrice = value;
    }
    get hash() {
      return this[hash];
    }
    set hash(value) {
      super.hash = value;
    }
    get input() {
      return this[input];
    }
    set input(value) {
      super.input = value;
    }
    get nonce() {
      return this[nonce];
    }
    set nonce(value) {
      super.nonce = value;
    }
    get to() {
      return this[to];
    }
    set to(value) {
      super.to = value;
    }
    get transactionIndex() {
      return this[transactionIndex];
    }
    set transactionIndex(value) {
      this[transactionIndex] = value;
    }
    get value() {
      return this[value];
    }
    set value(value) {
      super.value = value;
    }
    get v() {
      return this[v];
    }
    set v(value) {
      super.v = value;
    }
    get r() {
      return this[r];
    }
    set r(value) {
      super.r = value;
    }
    get s() {
      return this[s];
    }
    set s(value) {
      super.s = value;
    }
  };
  (web3dart.TransactionInformation.fromMap = function(map) {
    this[blockHash] = T$.StringL().as(map[$_get]("blockHash"));
    this[blockNumber] = map[$_get]("blockNumber") != null ? new web3dart.BlockNum.exact(core.int.parse(T$.StringL().as(map[$_get]("blockNumber")))) : C[13] || CT.C13;
    this[from] = credentials.EthereumAddress.fromHex(T$.StringL().as(map[$_get]("from")));
    this[gas] = core.int.parse(T$.StringL().as(map[$_get]("gas")));
    this[gasPrice] = new web3dart.EtherAmount.inWei(core.BigInt.parse(T$.StringL().as(map[$_get]("gasPrice"))));
    this[hash] = T$.StringL().as(map[$_get]("hash"));
    this[input] = crypto.hexToBytes(T$.StringL().as(map[$_get]("input")));
    this[nonce] = core.int.parse(T$.StringL().as(map[$_get]("nonce")));
    this[to] = map[$_get]("to") != null ? credentials.EthereumAddress.fromHex(T$.StringL().as(map[$_get]("to"))) : null;
    this[transactionIndex] = map[$_get]("transactionIndex") != null ? core.int.parse(T$.StringL().as(map[$_get]("transactionIndex"))) : null;
    this[value] = new web3dart.EtherAmount.inWei(core.BigInt.parse(T$.StringL().as(map[$_get]("value"))));
    this[v] = core.int.parse(T$.StringL().as(map[$_get]("v")));
    this[r] = crypto.hexToBytes(T$.StringL().as(map[$_get]("r")));
    this[s] = crypto.hexToBytes(T$.StringL().as(map[$_get]("s")));
    ;
  }).prototype = web3dart.TransactionInformation.prototype;
  dart.addTypeTests(web3dart.TransactionInformation);
  dart.addTypeCaches(web3dart.TransactionInformation);
  dart.setLibraryUri(web3dart.TransactionInformation, I[0]);
  dart.setFieldSignature(web3dart.TransactionInformation, () => ({
    __proto__: dart.getFields(web3dart.TransactionInformation.__proto__),
    blockHash: dart.finalFieldType(dart.legacy(core.String)),
    blockNumber: dart.finalFieldType(dart.legacy(web3dart.BlockNum)),
    from: dart.finalFieldType(dart.legacy(credentials.EthereumAddress)),
    gas: dart.finalFieldType(dart.legacy(core.int)),
    gasPrice: dart.finalFieldType(dart.legacy(web3dart.EtherAmount)),
    hash: dart.finalFieldType(dart.legacy(core.String)),
    input: dart.finalFieldType(dart.legacy(typed_data.Uint8List)),
    nonce: dart.finalFieldType(dart.legacy(core.int)),
    to: dart.finalFieldType(dart.legacy(credentials.EthereumAddress)),
    transactionIndex: dart.fieldType(dart.legacy(core.int)),
    value: dart.finalFieldType(dart.legacy(web3dart.EtherAmount)),
    v: dart.finalFieldType(dart.legacy(core.int)),
    r: dart.finalFieldType(dart.legacy(typed_data.Uint8List)),
    s: dart.finalFieldType(dart.legacy(typed_data.Uint8List))
  }));
  var transactionHash = dart.privateName(web3dart, "TransactionReceipt.transactionHash");
  var transactionIndex$0 = dart.privateName(web3dart, "TransactionReceipt.transactionIndex");
  var blockHash$0 = dart.privateName(web3dart, "TransactionReceipt.blockHash");
  var blockNumber$ = dart.privateName(web3dart, "TransactionReceipt.blockNumber");
  var from$0 = dart.privateName(web3dart, "TransactionReceipt.from");
  var to$0 = dart.privateName(web3dart, "TransactionReceipt.to");
  var cumulativeGasUsed = dart.privateName(web3dart, "TransactionReceipt.cumulativeGasUsed");
  var gasUsed = dart.privateName(web3dart, "TransactionReceipt.gasUsed");
  var contractAddress = dart.privateName(web3dart, "TransactionReceipt.contractAddress");
  var status = dart.privateName(web3dart, "TransactionReceipt.status");
  web3dart.TransactionReceipt = class TransactionReceipt extends core.Object {
    get transactionHash() {
      return this[transactionHash];
    }
    set transactionHash(value) {
      super.transactionHash = value;
    }
    get transactionIndex() {
      return this[transactionIndex$0];
    }
    set transactionIndex(value) {
      super.transactionIndex = value;
    }
    get blockHash() {
      return this[blockHash$0];
    }
    set blockHash(value) {
      super.blockHash = value;
    }
    get blockNumber() {
      return this[blockNumber$];
    }
    set blockNumber(value) {
      super.blockNumber = value;
    }
    get from() {
      return this[from$0];
    }
    set from(value) {
      super.from = value;
    }
    get to() {
      return this[to$0];
    }
    set to(value) {
      super.to = value;
    }
    get cumulativeGasUsed() {
      return this[cumulativeGasUsed];
    }
    set cumulativeGasUsed(value) {
      super.cumulativeGasUsed = value;
    }
    get gasUsed() {
      return this[gasUsed];
    }
    set gasUsed(value) {
      super.gasUsed = value;
    }
    get contractAddress() {
      return this[contractAddress];
    }
    set contractAddress(value) {
      super.contractAddress = value;
    }
    get status() {
      return this[status];
    }
    set status(value) {
      super.status = value;
    }
  };
  (web3dart.TransactionReceipt.fromJson = function(map) {
    this[transactionHash] = crypto.hexToBytes(T$.StringL().as(map[$_get]("transactionHash")));
    this[transactionIndex$0] = crypto.hexToDartInt(T$.StringL().as(map[$_get]("transactionIndex")));
    this[blockHash$0] = crypto.hexToBytes(T$.StringL().as(map[$_get]("blockHash")));
    this[blockNumber$] = map[$_get]("blockNumber") != null ? new web3dart.BlockNum.exact(core.int.parse(T$.StringL().as(map[$_get]("blockNumber")))) : C[13] || CT.C13;
    this[from$0] = credentials.EthereumAddress.fromHex(T$.StringL().as(map[$_get]("from")));
    this[to$0] = map[$_get]("to") != null ? credentials.EthereumAddress.fromHex(T$.StringL().as(map[$_get]("to"))) : null;
    this[cumulativeGasUsed] = crypto.hexToInt(T$.StringL().as(map[$_get]("cumulativeGasUsed")));
    this[gasUsed] = crypto.hexToInt(T$.StringL().as(map[$_get]("gasUsed")));
    this[contractAddress] = map[$_get]("contractAddress") != null ? credentials.EthereumAddress.fromHex(T$.StringL().as(map[$_get]("contractAddress"))) : null;
    this[status] = crypto.hexToDartInt(T$.StringL().as(map[$_get]("status"))) === 1;
    ;
  }).prototype = web3dart.TransactionReceipt.prototype;
  dart.addTypeTests(web3dart.TransactionReceipt);
  dart.addTypeCaches(web3dart.TransactionReceipt);
  dart.setLibraryUri(web3dart.TransactionReceipt, I[0]);
  dart.setFieldSignature(web3dart.TransactionReceipt, () => ({
    __proto__: dart.getFields(web3dart.TransactionReceipt.__proto__),
    transactionHash: dart.finalFieldType(dart.legacy(typed_data.Uint8List)),
    transactionIndex: dart.finalFieldType(dart.legacy(core.int)),
    blockHash: dart.finalFieldType(dart.legacy(typed_data.Uint8List)),
    blockNumber: dart.finalFieldType(dart.legacy(web3dart.BlockNum)),
    from: dart.finalFieldType(dart.legacy(credentials.EthereumAddress)),
    to: dart.finalFieldType(dart.legacy(credentials.EthereumAddress)),
    cumulativeGasUsed: dart.finalFieldType(dart.legacy(core.BigInt)),
    gasUsed: dart.finalFieldType(dart.legacy(core.BigInt)),
    contractAddress: dart.finalFieldType(dart.legacy(credentials.EthereumAddress)),
    status: dart.finalFieldType(dart.legacy(core.bool))
  }));
  web3dart._SigningInput = class _SigningInput extends core.Object {};
  (web3dart._SigningInput.new = function(opts) {
    let transaction = opts && 'transaction' in opts ? opts.transaction : null;
    let credentials = opts && 'credentials' in opts ? opts.credentials : null;
    let chainId = opts && 'chainId' in opts ? opts.chainId : null;
    this.transaction = transaction;
    this.credentials = credentials;
    this.chainId = chainId;
    ;
  }).prototype = web3dart._SigningInput.prototype;
  dart.addTypeTests(web3dart._SigningInput);
  dart.addTypeCaches(web3dart._SigningInput);
  dart.setLibraryUri(web3dart._SigningInput, I[0]);
  dart.setFieldSignature(web3dart._SigningInput, () => ({
    __proto__: dart.getFields(web3dart._SigningInput.__proto__),
    transaction: dart.finalFieldType(dart.legacy(web3dart.Transaction)),
    credentials: dart.finalFieldType(dart.legacy(credentials.Credentials)),
    chainId: dart.finalFieldType(dart.legacy(core.int))
  }));
  web3dart._internalCreatePrivateKey = function _internalCreatePrivateKey(hex) {
    return async.async(T$.EthPrivateKeyL(), function* _internalCreatePrivateKey() {
      let key = new credentials.EthPrivateKey.fromHex(hex);
      yield key.extractAddress();
      return key;
    });
  };
  web3dart.internalSign = function internalSign(t) {
    return web3dart._signTransaction(t.transaction, t.credentials, t.chainId);
  };
  web3dart._fillMissingData = function _fillMissingData(opts) {
    let credentials = opts && 'credentials' in opts ? opts.credentials : null;
    let transaction = opts && 'transaction' in opts ? opts.transaction : null;
    let chainId = opts && 'chainId' in opts ? opts.chainId : null;
    let loadChainIdFromNetwork = opts && 'loadChainIdFromNetwork' in opts ? opts.loadChainIdFromNetwork : false;
    let client = opts && 'client' in opts ? opts.client : null;
    return async.async(T$._SigningInputL(), function* _fillMissingData() {
      let t4, t4$, t4$0, t4$1;
      if (!(credentials != null)) dart.assertFailed(null, I[1], 18, 10, "credentials != null");
      if (!(transaction != null)) dart.assertFailed(null, I[1], 19, 10, "transaction != null");
      if (!(loadChainIdFromNetwork != null)) dart.assertFailed(null, I[1], 20, 10, "loadChainIdFromNetwork != null");
      if (!(!dart.test(loadChainIdFromNetwork) || chainId != null)) dart.assertFailed("You can't specify loadChainIdFromNetwork and specify a custom chain id!", I[1], 21, 10, "!loadChainIdFromNetwork || chainId != null");
      let modifiedTransaction = transaction.copyWith({value: (t4 = transaction.value, t4 == null ? new web3dart.EtherAmount.zero() : t4), maxGas: (t4$ = transaction.maxGas, t4$ == null ? 90000 : t4$), from: (t4$0 = transaction.from, t4$0 == null ? (yield credentials.extractAddress()) : t4$0), data: (t4$1 = transaction.data, t4$1 == null ? _native_typed_data.NativeUint8List.new(0) : t4$1)});
      let resolvedChainId = null;
      if (!dart.test(loadChainIdFromNetwork)) {
        resolvedChainId = chainId;
      } else {
        if (client == null) dart.throw(new core.ArgumentError.new("Can't load chain id from network when no client is set"));
        resolvedChainId = (yield client.getNetworkId());
      }
      if (modifiedTransaction.maxGas == null) {
        modifiedTransaction = modifiedTransaction.copyWith({maxGas: 90000});
      }
      if (modifiedTransaction.gasPrice == null) {
        if (client == null) {
          dart.throw(new core.ArgumentError.new("Can't find suitable gas price from client because " + "no client is set. Please specify a gas price on the transaction."));
        }
        modifiedTransaction = modifiedTransaction.copyWith({gasPrice: (yield client.getGasPrice())});
      }
      if (modifiedTransaction.nonce == null) {
        if (client == null) {
          dart.throw(new core.ArgumentError.new("Can't find the correct nonce because no client is " + "is set. Please specify a nonce in the transaction or specify a " + "client."));
        }
        modifiedTransaction = modifiedTransaction.copyWith({nonce: (yield client.getTransactionCount(modifiedTransaction.from))});
      }
      return new web3dart._SigningInput.new({transaction: modifiedTransaction, credentials: credentials, chainId: resolvedChainId});
    });
  };
  web3dart._signTransaction = function _signTransaction(transaction, c, chainId) {
    return async.async(T$.Uint8ListL(), function* _signTransaction() {
      let innerSignature = chainId == null ? null : new crypto.MsgSignature.new(core.BigInt.zero, core.BigInt.zero, chainId);
      let encoded = typed_data$.uint8ListFromList(rlp.encode(web3dart._encodeToRlp(transaction, innerSignature)));
      let signature = (yield c.signToSignature(encoded, {chainId: chainId}));
      return typed_data$.uint8ListFromList(rlp.encode(web3dart._encodeToRlp(transaction, signature)));
    });
  };
  web3dart._encodeToRlp = function _encodeToRlp(transaction, signature) {
    let t4, t4$;
    let list = T$.JSArrayOfObjectL().of([transaction.nonce, transaction.gasPrice.getInWei, transaction.maxGas]);
    if (transaction.to != null) {
      list[$add](transaction.to.addressBytes);
    } else {
      list[$add]("");
    }
    t4 = list;
    (() => {
      t4[$add](transaction.value.getInWei);
      t4[$add](transaction.data);
      return t4;
    })();
    if (signature != null) {
      t4$ = list;
      (() => {
        t4$[$add](signature.v);
        t4$[$add](signature.r);
        t4$[$add](signature.s);
        return t4$;
      })();
    }
    return list;
  };
  var Duration__duration = dart.privateName(core, "Duration._duration");
  dart.defineLazy(web3dart, {
    /*web3dart._pingDuration*/get _pingDuration() {
      return C[14] || CT.C14;
    }
  }, true);
  dart.trackLibraries("packages/web3dart/web3dart.dart", {
    "package:web3dart/web3dart.dart": web3dart
  }, {
    "package:web3dart/web3dart.dart": ["src/core/amount.dart", "src/core/block_number.dart", "src/core/client.dart", "src/core/expensive_operations.dart", "src/core/filters.dart", "src/core/sync_information.dart", "src/core/transaction.dart", "src/core/transaction_information.dart", "src/core/transaction_signer.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["src/core/amount.dart","src/core/block_number.dart","src/core/client.dart","src/core/expensive_operations.dart","src/core/filters.dart","src/core/sync_information.dart","src/core/transaction.dart","src/core/transaction_information.dart","src/core/transaction_signer.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../packages/web3dart/web3dart.dart.lib.js"}');
  // Exports:
  return {
    web3dart: web3dart
  };
}));

//# sourceMappingURL=web3dart.dart.lib.js.map
